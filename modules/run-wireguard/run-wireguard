#!/bin/bash

set -e

function log {
        local -r level="$1"
        local -r message="$2"
        local -r timestamp=$(date +"%Y-%m-%d %H:%M:%S")
        >&2 echo -e "$timestamp [$level] [$SCRIPT_NAME] $message"
}

function log_info {
        local -r message="$1"
        log "INFO" "$message"
}

function log_warn {
        local -r message="$1"
        log "WARN" "$message"
}

function log_error {
        local -r message="$1"
        log "ERROR" "$message"
}

function assert_not_empty {
        local -r arg_name="$1"
        local -r arg_value="$2"

        if [[ -z "$arg_value" ]]; then
            log_error "The value for '$arg_name' cannot be empty"
            exit 1
        fi
}

function replace_or_insert {
        local -r line="$1"
        local -r expression=`echo $line | awk -F '=' '{print $1}' | tr -d ' '`
        local -r file="$2"
        
        grep -q "^$expression" $file
        if [[ $? -ne 0 ]] ; then
            echo $line >> $file
        else
            sed -i -e "s/^.*$expression.*$/$line/" $file
        fi
}

##
function register_vpnserver_at_dns {
        local -r domain=$1; assert_not_empty "register_vpnserver_at_dns.domain" $domain
        local -r host_name=$(hostname -s).$domain
        local -r host_ip=$(hostname -I | awk -F ' ' '{print $1}')

        cat << EOF > /etc/unbound/unbound.conf.d/this.conf
server:
    local-data: "$host_name.     IN A $host_ip"
    local-data-ptr: "$host_ip  $host_name"
EOF
        chmod 640 /etc/unbound/unbound.conf.d/this.conf
}

##
function vpnserver_address {
    local -r subnet=$1; assert_not_empty "vpnserver_address.subnet" $subnet
    local -r addressonly=$2

    local -r addressrange=$(echo $subnet | awk -F '/' '{print $2}')
    assert_not_empty "vpnserver_address.addressrange" $addressrange

    local -r netmask=$(echo $subnet | awk -F '/' '{print $1}')
    assert_not_empty "vpnserver_address.netmask" $netmask

    # for simplicity, we assume that network masks have 0ed the least-significant bits, and that wg server will always be ".1"
    local leastbyte=$(echo $netmask | awk -F '.' '{print $4}')
    assert_not_empty "vpnserver_address.leastbyte" $leastbyte

    local topbytes=$(echo $netmask | awk -F '.' '{print $1"."$2"."$3"."}')

    if [[ -z $addressonly ]] ; then
            echo $topbytes$((leastbyte+1))"/"$addressrange
    else
            echo $topbytes$((leastbyte+1))
    fi
}

## 
function create_vpnserver_keys {
        local -r wgname=$1; assert_not_empty "create_vpnserver_keys.wgname" $wgname

        if [[ ! -e /etc/wireguard/.$wgname.server_private_key || ! -e /etc/wireguard/.$wgname.server_public_key ]] ; then
                umask 077
                wg genkey | tee /etc/wireguard/.$wgname.server_private_key | wg pubkey > /etc/wireguard/.$wgname.server_public_key
        fi
}

## 
function create_randomport {
        local randomport=""
        local udpports=""

        # find used udp ports
        for i in $(ufw status | grep "udp.*ALLOW" | awk -F ' ' '{print $1}' | awk -F '/' '{print $1}' | sort | uniq); do
                udpports+=($i)
        done

        # find a random port not already used
        while [[ -z $randomport ]] ; do
                randomport=$(shuf -i49152-65535 -n1)
                for i in "${udpports[@]}"; do
                        if [[ $i == $randomport ]] ; then
                                randomport=""
                        fi
                done
        done
        echo $randomport
}

##
function create_vpnserver_config {
        local -r wgname=$1; assert_not_empty "create_vpnserver_config.wgname" $wgname
        local -r subnet=$2; assert_not_empty "create_vpnserver_config.subnet" $subnet
        local -r port=$3;   assert_not_empty "create_vpnserver_config.port" $port

        # create serverside config for wireguard.
        umask 077
        cat <<EOF > /etc/wireguard/$wgname.conf
[Interface]
Address = $(vpnserver_address $subnet)
SaveConfig = true
PrivateKey = $(cat /etc/wireguard/.$wgname.server_private_key)
ListenPort = $port
PostUp = ufw allow $port/udp ; ufw route allow in on $wgname out on $wgname ; ufw reload
PreDown = ufw delete allow $port/udp ; ufw reload; ufw --force delete \`ufw status numbered | grep -E "Anywhere.*v6.*on $wgname.*Anywhere.*v6.*on $wgname" | tr -d '\[' | tr -d '\]' | awk -F ' ' '{print \$1}'\`; ufw reload; ufw --force delete \`ufw status numbered | grep -E "Anywhere.*on $wgname.*Anywhere.*on $wgname" | tr -d '\[' | tr -d '\]' | awk -F ' ' '{print \$1}'\` ; ufw reload
DNS = $(vpnserver_address $subnet "addressonly")
###--###
EOF
        # keep request data
        echo $subnet > /etc/wireguard/.$wgname.subnet
        echo $port > /etc/wireguard/.$wgname.port
        echo $(vpnserver_address $subnet "addressonly") > /etc/wireguard/.$wgname.vpnserver
}

function run_vpnserver {
        local -r wgname=$1; assert_not_empty "run_vpnserver.wgname" $wgname
        wg-quick up $wgname
        systemctl enable wg-quick@wg0.service
}

function keep_domain {
        local -r wgname=$1; assert_not_empty "keep_domain.wgname" $wgname
        local -r domain=$2; assert_not_empty "keep_domain.domain" $domain
        echo $domain > /etc/wireguard/.$wgname.domain
}

function enable_ip_forwarding {
#        replace_or_insert "net.ipv4.ip_forward=1" "/etc/sysctl.conf"
#        sysctl -p
#        echo 1 > /proc/sys/net/ipv4/ip_forward

# ! following not tested yet just quickly fixed on the server

        echo "net.ipv4.ip_forward=1" > /etc/sysctl.d/wg.conf
        echo "net.ipv6.conf.all.forwarding=1" >> /etc/sysctl.d/wg.conf
        sysctl --system
}

##
function run {
        local -r wgname=$1; assert_not_empty "run.wgname" $wgname
        local -r subnet=$2; assert_not_empty "run.subnet" $subnet
        local -r domain=$3; assert_not_empty "run.domain" $domain
        register_vpnserver_at_dns $domain
        create_vpnserver_keys $wgname
        port=$(create_randomport)
        log_info $port
        keep_domain $wgname $domain
        log_info $domain
        create_vpnserver_config $wgname $subnet $port
        run_vpnserver $wgname
}

run "$@"
